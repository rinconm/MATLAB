function data = importYearXLS(yr, dataDir)
% IMPORTYEARXLS  Import fuel economy data (from Excel data files)
%   DATA = IMPORTYEARXLS(YR) imports for the year YR. YR can be a scalar or
%   a vector of years between 2000 and 2007.
%
% Example:
%   data = importYearXLS(2005);
%   data = importYearXLS([2000 2004]);

% Copyright 2017 The MathWorks, Inc.

% Error check input argument
narginchk(1, 2);
validateattributes(yr, {'numeric'}, ...
    {'integer', 'vector', '>=', 2000, '<=', 2012});

if nargin == 1
    % Directory where the data files reside
    dataDir = 'dataXLS';
end

data = table;

% Loop through requested years
for iYear = 1:length(yr)
    
    filename = fullfile(dataDir,[num2str(yr(iYear)),'dat.xlsx']);
    data = [data; importfile(filename)]; %#ok<AGROW>
    
end

end

function tableout = importfile(workbookFile,sheetName,startRow,endRow)
%IMPORTFILE Import data from a spreadsheet
%   DATA = IMPORTFILE(FILE) reads data from the first worksheet in the
%   Microsoft Excel spreadsheet file named FILE and returns the data as a
%   table.
%
%   DATA = IMPORTFILE(FILE,SHEET) reads from the specified worksheet.
%
%   DATA = IMPORTFILE(FILE,SHEET,STARTROW,ENDROW) reads from the specified
%   worksheet for the specified row interval(s). Specify STARTROW and
%   ENDROW as a pair of scalars or vectors of matching size for
%   dis-contiguous row intervals. To read to the end of the file specify an
%   ENDROW of inf.
%
%	Non-numeric cells are replaced with: NaN
%
% Example:
%   dat = importfile('2007dat.xlsx','Sheet1',2,2596);
%
%   See also XLSREAD.

% Auto-generated by MATLAB on 2017/06/23 16:54:56

%% Input handling

% If no sheet is specified, read first sheet
if nargin == 1 || isempty(sheetName)
    sheetName = 1;
end

% If row start and end points are not specified, define defaults
if nargin <= 3
    startRow = 2;
    endRow = 2596;
end

%% Import the data
[~, ~, raw] = xlsread(workbookFile, sheetName, sprintf('A%d:X%d',startRow(1),endRow(1)));
for block=2:length(startRow)
    [~, ~, tmpRawBlock] = xlsread(workbookFile, sheetName, sprintf('A%d:X%d',startRow(block),endRow(block)));
    raw = [raw;tmpRawBlock]; %#ok<AGROW>
end
raw(cellfun(@(x) ~isempty(x) && isnumeric(x) && isnan(x),raw)) = {''};
stringVectors = string(raw(:,[2,3,4,6,8,14,17]));
stringVectors(ismissing(stringVectors)) = '';
raw = raw(:,[1,5,7,9,10,11,12,13,15,16,18,19,20,21,22,23,24]);

%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),raw); % Find non-numeric cells
raw(R) = {NaN}; % Replace non-numeric cells

%% Create output variable
I = cellfun(@(x) ischar(x), raw);
raw(I) = {NaN};
data = reshape([raw{:}],size(raw));

%% Create table
tableout = table;

%% Allocate imported array to column variable names
tableout.Year = data(:,1);
tableout.MfrName = categorical(stringVectors(:,1));
tableout.CarLine = categorical(stringVectors(:,2));
tableout.Car_Truck = categorical(stringVectors(:,3));
tableout.EngDisp = data(:,2);
tableout.Police = categorical(stringVectors(:,4));
tableout.RatedHP = data(:,3);
tableout.Transmission = categorical(stringVectors(:,5));
tableout.Drive = data(:,4);
tableout.Weight = data(:,5);
tableout.Comp = data(:,6);
tableout.AxleRatio = data(:,7);
tableout.EVSpeedRatio = data(:,8);
tableout.AC = categorical(stringVectors(:,6));
tableout.PRP = data(:,9);
tableout.FuelType = data(:,10);
tableout.City_Highway = categorical(stringVectors(:,7));
tableout.HC = data(:,11);
tableout.CO = data(:,12);
tableout.CO2 = data(:,13);
tableout.NOX = data(:,14);
tableout.MPG = data(:,15);
tableout.Valves_Cyl = data(:,16);
tableout.CoastDownTime = data(:,17);

end